x Iniciar e configurar API .net mais recente

x Estruturar as pastas usando CQRS 

x Instalar e configurar o MediatR

- Criar o DTO BookBaseDTO
    - Titulo: string
    - Autor: string
    - Ano de publicação: Tipo date só que só com anos (opcional)
    - Gênero: string (opcional)
    - Removido: bool

- Criar o DTO RequestBookUpdate
    - Titulo: string (opcional)
    - Autor: string (opcional)
    - Ano de publicação: Tipo date só que só com anos (opcional)
    - Gênero: string (opcional)

- Criar o Model BookModel que extende de BookBaseDTO
        - Id: Guid

- Criar uma exception customizada de não encontrado o dado

- Instlaar EF e configurar o sqlite

- Funcionalidade cadastrar livro
    - Criar command RegisterBookCommand que herda o BookBaseDTO
        -Retornar um GUID

    - Criar o handler RegisterBookCommandHandler
        - Ele espera receber RegisterBookCommand e retorna um GUID
        - Ele gera um Guid que será o id e o Removed como false
        - E faz a persistencia dos dados
        - Tem que ter o try/catch
    
    - Controller (post (/register))
        - Espera receber do tipo RegisterBookCommand
        - Usando o MediatR tenho que passar o request para o handler certo
        - Ocorrendo tudo certo retorna um estado 201 de created

- Funcionalidade editar livro
    - Criar command EditBookCommand
        - Atributos    
            - Titulo: string (opcional)
            - Autor: string (opcional)
            - Ano de publicação: Tipo date só que só com anos (opcional)
            - Gênero: string (opcional)
            - Id: Guid (Obrigatorio)

    - Criar o handler EditBookCommandHandler
        - Ele espera receber EditBookCommand
        - Tre o try/catch para erros ou para caso não encontre o dado a ser atualizado
            - Criterio de busca é o id e o Removed sendo false
        - Ele valida quais campos são atualizados (Ver a boa pratica de atualizar somente os dados enviados em c#) e atualiza eles
        - E faz a persistencia dos dados 

    - Criar query GetBookQuery
        - Retorna BookModel
        - Atributos    
            - Id (Guid)

    - Criar o handler GetBookQueryHandler
        - Ele espera receber GetBookQuery e retorna um BookModel
        - Ele pesquisa usando o ID para identificar o book e retorna ele
        - Tem que ter try/catch
        - Se não encontrar, lança uma exception customizada de não encontrada

    - Controller (put (/edit/${id}))
        - Espera receber do tipo RequestBookUpdate e o id por param
        - Cria um objeto do tipo EditBookCommand passando os dados da request e o id recebido por param
        - Usando o MediatR tenho que passar o objeto do tipo EditBookCommand para o handler certo EditBookHandler
        - Após isso usando o MediatR tenho que passar o param id de GetBookQuery para o handler certo GetBookQuery
        - Ocorrendo tudo certo retorna um estado 200 de ok
        - Aqui no try/cacth se cair na exception de não ter encontrado ai retorna NotFound do contrario um qualquer

- Funcionalidade excluir um livro
    - Criar command RemoveBookCommand
        - Atributos    
            - Id (Guid)

    - Criar o handler RemoveBookCommandHandler
        - Ele espera receber RemoveBookCommand
        - Ele pesquisa usando o ID para identificar o book e se o removed está false, e alterar o Removed para True
        - Tem que ter try/catch
        - Se não encontrar, lança uma exception customizada de não encontrada

    - Controller (put (/remove/${id}))
        - Espera o id por param
        - Usando o MediatR tenho que passar o id do tipo RemoveBookCommand para o handler certo RemoveBookCommandHandler
        - Ocorrendo tudo certo retorna um estado 200 de ok
        - Aqui no try/cacth se cair na exception de não ter encontrado ai retorna NotFound do contrario um qualquer


- Funcionalidade listar todos livros
    - Criar Query ListAllBookQuery

    - Criar o handler ListAllBookQueryHandler
        - Ele pesquisa todos books que o removed está false

    - Controller (get (/list/all))
        - Usando o MediatR tenho que o tipo ListAllBookQuery para o handler certo ListAllBookQueryHandler
        - Ocorrendo tudo certo retorna um estado 200 de ok
        - Aqui no try/cacth se der erro retorna erro generico

- Funcionalidade de buscar um livro pelo id
    - Criar query getBookByIdQuery
        - Retorna BookModel
        - Atributos    
            - Id (Guid)

    - Criar handler getBookByIdQueryHandler
        - Ele espera receber getBookByIdQuery e retorna BookModel
        - Ele pesquisa usando o ID para identificar o book e se o removed está false
        - Tem que ter try/catch
        - Se não encontrar, lança uma exception customizada de não encontrada

    - Controller (get (/${id}))
        - Espera o id por param
        - Usando o MediatR tenho que passar o id do tipo getBookByIdQuery para o handler certo getBookByIdQueryHandler
        - Ocorrendo tudo certo retorna um estado 200 de ok
        - Aqui no try/cacth se cair na exception de não ter encontrado ai retorna NotFound do contrario um qualquer

- Adicionar swagger

x Iniciar e configurar API .net mais recente

x Estruturar as pastas usando CQRS 

x Instalar e configurar o MediatR

x Criar o DTO BookBaseDTO
    x Titulo: string
    x Autor: string
    x Ano de publicação: Tipo date só que só com anos (opcional)
    x Gênero: string (opcional)
    x Removido: bool

x Criar Model de request RequestBookUpdate
    x Titulo: string (opcional)
    x Autor: string (opcional)
    x Ano de publicação: Tipo date só que só com anos (opcional)
    x Gênero: string (opcional)

x Criar a Entity BookEntity que extende de BookBaseDTO
        x Id: Guid

x Criar uma exception customizada de não encontrado o dado

x Instlaar EF e configurar o sqlite

x Configurar a geração do id e do updateAt

x Funcionalidade cadastrar livro
    x Criar command RegisterBookCommand que herda o BookBaseDTO
        x Retornar um GUID

    x Criar o handler RegisterBookCommandHandler
        x Ele espera receber RegisterBookCommand e retorna um GUID
        x Ele gera um Guid que será o id e o Removed como false
        x E faz a persistencia dos dados
        x Tem que ter o try/catch
    
    x Controller (post (/register))
        x Espera receber do tipo RegisterBookCommand
        x Usando o MediatR tenho que passar o request para o handler certo
        x Ocorrendo tudo certo retorna um estado 201 de created

x Funcionalidade editar livro
    x Criar command EditBookCommand
        x Atributos    
            x Titulo: string (opcional)
            x Autor: string (opcional)
            x Ano de publicação: Tipo date só que só com anos (opcional)
            x Gênero: string (opcional)
            x Id: Guid (Obrigatorio)

    x Criar o handler EditBookCommandHandler
        x Ele espera receber EditBookCommand
        x Tre o try/catch para erros ou para caso não encontre o dado a ser atualizado
            x Criterio de busca é o id e o Removed sendo false
                x Se não encontrar, lança uma exception customizada de não encontrada
        x Ele valida quais campos são atualizados (Ver a boa pratica de atualizar somente os dados enviados em c#) e atualiza eles
        x E faz a persistencia dos dados 

    x Criar query GetBookQuery
        x Retorna BookModel
        x Atributos    
            x Id (Guid)

    x Criar o handler GetBookQueryHandler
        x Ele espera receber GetBookQuery e retorna um BookModel
        x Ele pesquisa usando o ID para identificar o book e retorna ele
        x Tem que ter try/catch
        x Se não encontrar, lança uma exception customizada de não encontrada

    x Controller (put (/edit/${id}))
        x Espera receber do tipo RequestBookUpdate e o id por param
        x Cria um objeto do tipo EditBookCommand passando os dados da request e o id recebido por param
        x Usando o MediatR tenho que passar o objeto do tipo EditBookCommand para o handler certo EditBookHandler
        x Após isso usando o MediatR tenho que passar o param id de GetBookQuery para o handler certo GetBookQuery
        x Ocorrendo tudo certo retorna um estado 200 de ok
        x Aqui no try/cacth se cair na exception de não ter encontrado ai retorna NotFound do contrario um qualquer

x Funcionalidade excluir um livro
    x Criar command RemoveBookCommand
        x Atributos    
            x Id (Guid)

    X Criar o handler RemoveBookCommandHandler
        X Ele espera receber RemoveBookCommand
        x Ele pesquisa usando o ID para identificar o book e se o removed está false, e alterar o Removed para True
        x Tem que ter try/catch
        x Se não encontrar, lança uma exception customizada de não encontrada

    - Controller (put (/remove/${id}))
        - Espera o id por param
        - Usando o MediatR tenho que passar o id do tipo RemoveBookCommand para o handler certo RemoveBookCommandHandler
        - Ocorrendo tudo certo retorna um estado 200 de ok
        - Aqui no try/cacth se cair na exception de não ter encontrado ai retorna NotFound do contrario um qualquer


- Funcionalidade listar todos livros
    - Criar Query ListAllBookQuery

    - Criar o handler ListAllBookQueryHandler
        - Ele pesquisa todos books que o removed está false

    - Controller (get (/list/all))
        - Usando o MediatR tenho que o tipo ListAllBookQuery para o handler certo ListAllBookQueryHandler
        - Ocorrendo tudo certo retorna um estado 200 de ok
        - Aqui no try/cacth se der erro retorna erro generico

- Funcionalidade de buscar um livro pelo id
    - Criar query getBookByIdQuery
        - Retorna BookModel
        - Atributos    
            - Id (Guid)

    - Criar handler getBookByIdQueryHandler
        - Ele espera receber getBookByIdQuery e retorna BookModel
        - Ele pesquisa usando o ID para identificar o book e se o removed está false
        - Tem que ter try/catch
        - Se não encontrar, lança uma exception customizada de não encontrada

    - Controller (get (/${id}))
        - Espera o id por param
        - Usando o MediatR tenho que passar o id do tipo getBookByIdQuery para o handler certo getBookByIdQueryHandler
        - Ocorrendo tudo certo retorna um estado 200 de ok
        - Aqui no try/cacth se cair na exception de não ter encontrado ai retorna NotFound do contrario um qualquer

- Adicionar swagger
